// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package algorithmio_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AlgorithmClient is the client API for Algorithm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlgorithmClient interface {
	Execute(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
}

type algorithmClient struct {
	cc grpc.ClientConnInterface
}

func NewAlgorithmClient(cc grpc.ClientConnInterface) AlgorithmClient {
	return &algorithmClient{cc}
}

func (c *algorithmClient) Execute(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/algorithmio.Algorithm/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlgorithmServer is the server API for Algorithm service.
// All implementations must embed UnimplementedAlgorithmServer
// for forward compatibility
type AlgorithmServer interface {
	Execute(context.Context, *Input) (*Output, error)
	mustEmbedUnimplementedAlgorithmServer()
}

// UnimplementedAlgorithmServer must be embedded to have forward compatible implementations.
type UnimplementedAlgorithmServer struct {
}

func (UnimplementedAlgorithmServer) Execute(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedAlgorithmServer) mustEmbedUnimplementedAlgorithmServer() {}

// UnsafeAlgorithmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlgorithmServer will
// result in compilation errors.
type UnsafeAlgorithmServer interface {
	mustEmbedUnimplementedAlgorithmServer()
}

func RegisterAlgorithmServer(s grpc.ServiceRegistrar, srv AlgorithmServer) {
	s.RegisterService(&_Algorithm_serviceDesc, srv)
}

func _Algorithm_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgorithmServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/algorithmio.Algorithm/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgorithmServer).Execute(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

var _Algorithm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "algorithmio.Algorithm",
	HandlerType: (*AlgorithmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Algorithm_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "algorithm/proto/algorithm_io.proto",
}
