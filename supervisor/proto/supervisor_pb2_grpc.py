# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import supervisor_pb2 as supervisor__pb2


class SupervisorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PlaceOrder = channel.unary_unary(
                '/supervisor.Supervisor/PlaceOrder',
                request_serializer=supervisor__pb2.Order.SerializeToString,
                response_deserializer=supervisor__pb2.OrderConfirmation.FromString,
                )
        self.GetPortfolio = channel.unary_unary(
                '/supervisor.Supervisor/GetPortfolio',
                request_serializer=supervisor__pb2.AlgorithmId.SerializeToString,
                response_deserializer=supervisor__pb2.Portfolio.FromString,
                )
        self.OpenPosition = channel.unary_unary(
                '/supervisor.Supervisor/OpenPosition',
                request_serializer=supervisor__pb2.OpenPositionInput.SerializeToString,
                response_deserializer=supervisor__pb2.PositionSpec.FromString,
                )
        self.ClosePosition = channel.unary_unary(
                '/supervisor.Supervisor/ClosePosition',
                request_serializer=supervisor__pb2.PositionSpec.SerializeToString,
                response_deserializer=supervisor__pb2.ClosePositionResponse.FromString,
                )
        self.DoneTrading = channel.unary_unary(
                '/supervisor.Supervisor/DoneTrading',
                request_serializer=supervisor__pb2.AlgorithmId.SerializeToString,
                response_deserializer=supervisor__pb2.DoneTradingResponse.FromString,
                )
        self.SynchronousDailySim = channel.unary_unary(
                '/supervisor.Supervisor/SynchronousDailySim',
                request_serializer=supervisor__pb2.SynchronousDailySimInput.SerializeToString,
                response_deserializer=supervisor__pb2.SynchronousDailySimOutput.FromString,
                )
        self.Abort = channel.unary_unary(
                '/supervisor.Supervisor/Abort',
                request_serializer=supervisor__pb2.AbortInput.SerializeToString,
                response_deserializer=supervisor__pb2.AbortOutput.FromString,
                )


class SupervisorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PlaceOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortfolio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClosePosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoneTrading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SynchronousDailySim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SupervisorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PlaceOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceOrder,
                    request_deserializer=supervisor__pb2.Order.FromString,
                    response_serializer=supervisor__pb2.OrderConfirmation.SerializeToString,
            ),
            'GetPortfolio': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortfolio,
                    request_deserializer=supervisor__pb2.AlgorithmId.FromString,
                    response_serializer=supervisor__pb2.Portfolio.SerializeToString,
            ),
            'OpenPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenPosition,
                    request_deserializer=supervisor__pb2.OpenPositionInput.FromString,
                    response_serializer=supervisor__pb2.PositionSpec.SerializeToString,
            ),
            'ClosePosition': grpc.unary_unary_rpc_method_handler(
                    servicer.ClosePosition,
                    request_deserializer=supervisor__pb2.PositionSpec.FromString,
                    response_serializer=supervisor__pb2.ClosePositionResponse.SerializeToString,
            ),
            'DoneTrading': grpc.unary_unary_rpc_method_handler(
                    servicer.DoneTrading,
                    request_deserializer=supervisor__pb2.AlgorithmId.FromString,
                    response_serializer=supervisor__pb2.DoneTradingResponse.SerializeToString,
            ),
            'SynchronousDailySim': grpc.unary_unary_rpc_method_handler(
                    servicer.SynchronousDailySim,
                    request_deserializer=supervisor__pb2.SynchronousDailySimInput.FromString,
                    response_serializer=supervisor__pb2.SynchronousDailySimOutput.SerializeToString,
            ),
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=supervisor__pb2.AbortInput.FromString,
                    response_serializer=supervisor__pb2.AbortOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'supervisor.Supervisor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Supervisor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PlaceOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supervisor.Supervisor/PlaceOrder',
            supervisor__pb2.Order.SerializeToString,
            supervisor__pb2.OrderConfirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPortfolio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supervisor.Supervisor/GetPortfolio',
            supervisor__pb2.AlgorithmId.SerializeToString,
            supervisor__pb2.Portfolio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supervisor.Supervisor/OpenPosition',
            supervisor__pb2.OpenPositionInput.SerializeToString,
            supervisor__pb2.PositionSpec.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClosePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supervisor.Supervisor/ClosePosition',
            supervisor__pb2.PositionSpec.SerializeToString,
            supervisor__pb2.ClosePositionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoneTrading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supervisor.Supervisor/DoneTrading',
            supervisor__pb2.AlgorithmId.SerializeToString,
            supervisor__pb2.DoneTradingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SynchronousDailySim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supervisor.Supervisor/SynchronousDailySim',
            supervisor__pb2.SynchronousDailySimInput.SerializeToString,
            supervisor__pb2.SynchronousDailySimOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/supervisor.Supervisor/Abort',
            supervisor__pb2.AbortInput.SerializeToString,
            supervisor__pb2.AbortOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
